services:
    # PostgreSQL Database
    postgres:
        image: postgres:latest
        container_name: postgres_jec
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}
        expose:
            - '${POSTGRES_PORT}'
        ports:
            - '${POSTGRES_PORT}:${POSTGRES_PORT}'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        command: -p ${POSTGRES_PORT}
        networks:
            - jec-network
        
    # Redis for caching
    redis:
        image: redis:latest
        ports:
          - "6379:6379"
        networks:
            - jec-network
    
    # Service Account (Spring Boot with Gradle)
    service-account:
        build: 
            context: ./Service_Account/Service_Account_Backend
            dockerfile: Dockerfile.dev
        container_name: service-account
        ports:
            - "8001:8001"
        depends_on:
            - postgres
        environment:
            - SPRING_DATASOURCE_URL=${ACCOUNT_SPRING_DATASOURCE_URL}
            - SPRING_DATASOURCE_USERNAME=${ACCOUNT_SPRING_DATASOURCE_USERNAME}
            - SPRING_DATASOURCE_PASSWORD=${ACCOUNT_SPRING_DATASOURCE_PASSWORD}
            - APP_FRONTEND_URL=${ACCOUNT_APP_FRONTEND_URL}
            - APP_OAUTH2_SUCCESS_URL=${ACCOUNT_APP_OAUTH2_SUCCESS_URL}
            - APP_CORS_ALLOWED_ORIGINS=${ACCOUNT_APP_CORS_ALLOWED_ORIGINS}
            - SPRING_MAIL_USERNAME=${ACCOUNT_SPRING_MAIL_USERNAME}
            - SPRING_MAIL_PASSWORD=${ACCOUNT_SPRING_MAIL_PASSWORD}
            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${ACCOUNT_SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${ACCOUNT_SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
        volumes:
            - ./Service_Account/Service_Account_Backend:/app
            - service-account-gradle:/root/.gradle
            - uploads_account:/app/uploads/avatars
        networks:
            - jec-network
            
    # Service Catalog (Spring Boot with Gradle)
    service-catalog:
        build: 
            context: ./Service_Catalog/Service_Catalog_Backend
            dockerfile: Dockerfile.dev
        container_name: service-catalog
        ports:
            - "8005:8005"
        depends_on:
            - service-account
            - postgres
            - redis
        environment:
            - SPRING_DATASOURCE_URL=${CATALOG_SPRING_DATASOURCE_URL}
            - SPRING_DATASOURCE_USERNAME=${CATALOG_SPRING_DATASOURCE_USERNAME}
            - SPRING_DATASOURCE_PASSWORD=${CATALOG_SPRING_DATASOURCE_PASSWORD}
            - SPRING_REDIS_HOST=${CATALOG_SPRING_REDIS_HOST}
            - SPRING_REDIS_PORT=${CATALOG_SPRING_REDIS_PORT}
        volumes:
            - ./Service_Catalog/Service_Catalog_Backend:/app
            - service-catalog-gradle:/root/.gradle
            - uploads_products:/app/uploads/products
        networks:
            - jec-network
            
    # Service Cart/Order (Node.js)
    service-cart-order:
        build: 
            context: ./Service_Cart_Order/Service_Cart_Order_Backend
            dockerfile: Dockerfile.dev
        container_name: service-cart-order
        ports:
            - "8006:8006"
        depends_on:
            - service-catalog
            - postgres
        environment:
            - DB_HOST=${CART_ORDER_DB_HOST}
            - DB_PORT=${CART_ORDER_DB_PORT}
            - DB_NAME=${CART_ORDER_DB_NAME}
            - DB_USER=${CART_ORDER_DB_USER}
            - DB_PASSWORD=${CART_ORDER_DB_PASSWORD}
        volumes:
            - ./Service_Cart_Order/Service_Cart_Order_Backend:/app
            - service-cart-order-node_modules:/app/node_modules
        networks:
            - jec-network
            
    # Service Manager (Spring Boot with Maven)
    service-manager:
        build: 
            context: ./Service_Manager
            dockerfile: Dockerfile.dev
        container_name: service-manager
        ports:
            - "8003:8003"
        depends_on:
            - service-cart-order
            - postgres
            - redis
        environment:
            - SPRING_PROFILES_ACTIVE=${MANAGER_SPRING_PROFILES_ACTIVE}
            - SPRING_DATASOURCE_URL=${MANAGER_SPRING_DATASOURCE_URL}
            - SPRING_DATASOURCE_USERNAME=${MANAGER_SPRING_DATASOURCE_USERNAME}
            - SPRING_DATASOURCE_PASSWORD=${MANAGER_SPRING_DATASOURCE_PASSWORD}
        volumes:
            - ./Service_Manager:/app
            - service-manager-m2:/root/.m2
        networks:
            - jec-network
            
    # API Gateway - Starts last after all services
    api-gateway:
        build: 
            context: ./API_Gateway/api-gateway
            dockerfile: Dockerfile.dev
        container_name: api-gateway
        ports:
            - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
        depends_on:
            - service-account
            - service-manager
            - service-catalog
            - service-cart-order
        environment:
            - PORT=${API_GATEWAY_PORT}
            - ACCOUNT_SERVICE_HOST=${API_GATEWAY_ACCOUNT_SERVICE_HOST}
            - MANAGER_SERVICE_HOST=${API_GATEWAY_MANAGER_SERVICE_HOST}
            - CATALOG_SERVICE_HOST=${API_GATEWAY_CATALOG_SERVICE_HOST}
            - CART_ORDER_SERVICE_HOST=${API_GATEWAY_CART_ORDER_SERVICE_HOST}
        volumes:
            - ./API_Gateway/api-gateway:/app
            - api-gateway-node_modules:/app/node_modules
            - api-gateway-logs:/app/logs
        networks:
            - jec-network
            
    service-chatbot:
        build:
            context: ./Service_Chatbot/Service_Chatbot_Python
            dockerfile: Dockerfile
        container_name: service-chatbot
        ports:
            - "5000:5000"
        depends_on:
            - api-gateway
        environment:
            - GEMINI_API_KEY=AIzaSyAxSK1D1M1mDrKm9a3_v6L29O4H1G59vf0
            - API_GATEWAY_URL=http://api-gateway:8000/api/v1
        volumes:
            - ./Service_Chatbot/Service_Chatbot_Python:/app
        networks:
            - jec-network

networks:
    jec-network:
        driver: bridge

volumes:
    postgres_data:
    uploads_products:
    uploads_account:
    service-manager-m2:
    service-account-gradle:
    service-catalog-gradle:
    service-cart-order-node_modules:
    api-gateway-node_modules:
    api-gateway-logs: