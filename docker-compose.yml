version: '3.8'

services:
  # Database Layer
  postgres:
    image: postgres:15-alpine
    container_name: postgres_jec
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT}
    networks:
      - jec-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis_jec
    ports:
      - "6379:6379"
    networks:
      - jec-network
    restart: unless-stopped

  # Core Services (ordered by port)
  service-account:
    build: 
      context: ./Workspace/Service_Account/Service_Account_Backend
      dockerfile: Dockerfile.dev
    container_name: service-account
    ports:
      - "8001:8001"
    depends_on:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=${ACCOUNT_SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${ACCOUNT_SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${ACCOUNT_SPRING_DATASOURCE_PASSWORD}
      - APP_FRONTEND_URL=${ACCOUNT_APP_FRONTEND_URL}
      - APP_OAUTH2_SUCCESS_URL=${ACCOUNT_APP_OAUTH2_SUCCESS_URL}
      - APP_CORS_ALLOWED_ORIGINS=${ACCOUNT_APP_CORS_ALLOWED_ORIGINS}
      - SPRING_MAIL_USERNAME=${ACCOUNT_SPRING_MAIL_USERNAME}
      - SPRING_MAIL_PASSWORD=${ACCOUNT_SPRING_MAIL_PASSWORD}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID=${ACCOUNT_SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
      - SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET=${ACCOUNT_SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
    volumes:
      - service-account-gradle:/root/.gradle
      - uploads_account:/app/uploads/avatars
    networks:
      - jec-network
    restart: unless-stopped

  service-manager:
    build: 
      context: ./Workspace/Service_Manager
      dockerfile: Dockerfile.dev
    container_name: service-manager
    ports:
      - "8003:8003"
    depends_on:
      - postgres
      - redis
    environment:
      - SPRING_PROFILES_ACTIVE=${MANAGER_SPRING_PROFILES_ACTIVE}
      - SPRING_DATASOURCE_URL=${MANAGER_SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${MANAGER_SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${MANAGER_SPRING_DATASOURCE_PASSWORD}
      - MANAGEMENT_METRICS_BINDERS_PROCESSOR_ENABLED=${MANAGER_MANAGEMENT_METRICS_BINDERS_PROCESSOR_ENABLED}
      - MANAGEMENT_METRICS_BINDERS_UPTIME_ENABLED=${MANAGER_MANAGEMENT_METRICS_BINDERS_UPTIME_ENABLED}
    volumes:
      - service-manager-m2:/root/.m2
    networks:
      - jec-network
    restart: unless-stopped

  service-catalog:
    build: 
      context: ./Workspace/Service_Catalog/Service_Catalog_Backend
      dockerfile: Dockerfile.dev
    container_name: service-catalog
    ports:
      - "8005:8005"
    depends_on:
      - postgres
      - redis
    environment:
      - SPRING_DATASOURCE_URL=${CATALOG_SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${CATALOG_SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${CATALOG_SPRING_DATASOURCE_PASSWORD}
      - SPRING_REDIS_HOST=${CATALOG_SPRING_REDIS_HOST}
      - SPRING_REDIS_PORT=${CATALOG_SPRING_REDIS_PORT}
    volumes:
      - service-catalog-gradle:/root/.gradle
      - uploads_products:/app/uploads/products
    networks:
      - jec-network
    restart: unless-stopped

  service-cart-order:
    build: 
      context: ./Workspace/Service_Cart_Order/Service_Cart_Order_Backend
      dockerfile: Dockerfile.dev
    container_name: service-cart-order
    ports:
      - "8006:8006"
    depends_on:
      - postgres
    environment:
      - DB_HOST=${CART_ORDER_DB_HOST}
      - DB_PORT=${CART_ORDER_DB_PORT}
      - DB_NAME=${CART_ORDER_DB_NAME}
      - DB_USER=${CART_ORDER_DB_USER}
      - DB_PASSWORD=${CART_ORDER_DB_PASSWORD}
    volumes:
      - service-cart-order-node_modules:/app/node_modules
    networks:
      - jec-network
    restart: unless-stopped

  # AI Services
  service-chatbot:
    build:
      context: ./Workspace/Service_Chatbot/Service_Chatbot_Python
      dockerfile: Dockerfile
    container_name: service-chatbot
    ports:
      - "5000:5000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - API_GATEWAY_URL=http://api-gateway:${API_GATEWAY_PORT}/api/v1
    networks:
      - jec-network
    restart: unless-stopped

  # Gateway Layer (starts last)
  api-gateway:
    build: 
      context: ./Workspace/API_Gateway/api-gateway
      dockerfile: Dockerfile.dev
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    depends_on:
      - service-account
      - service-manager
      - service-catalog
      - service-cart-order
      - service-chatbot
    environment:
      - PORT=${API_GATEWAY_PORT}
      - ACCOUNT_SERVICE_HOST=${API_GATEWAY_ACCOUNT_SERVICE_HOST}
      - MANAGER_SERVICE_HOST=${API_GATEWAY_MANAGER_SERVICE_HOST}
      - CATALOG_SERVICE_HOST=${API_GATEWAY_CATALOG_SERVICE_HOST}
      - CART_ORDER_SERVICE_HOST=${API_GATEWAY_CART_ORDER_SERVICE_HOST}
    volumes:
      - api-gateway-node_modules:/app/node_modules
      - api-gateway-logs:/app/logs
    networks:
      - jec-network
    restart: unless-stopped

networks:
  jec-network:
    driver: bridge

volumes:
  postgres_data:
  uploads_products:
  uploads_account:
  service-manager-m2:
  service-account-gradle:
  service-catalog-gradle:
  service-cart-order-node_modules:
  api-gateway-node_modules:
  api-gateway-logs: